library(shiny)
library(tidyverse)
library(FactoMineR)
library(factoextra)
library(mice)
library(RColorBrewer)
library(ggExtra)
library(patchwork)
library(DT)  # 加载 DT 包

# 定义自动化 PCA 分析函数（与之前相同）
automated_pca_analysis <- function(df, category_col = NULL, numeric_cols = NULL, 
                                   missing_method = "pmm", missing_m = 5, scale_data = TRUE,
                                   title_p1 = "PCA 双标图", title_p2 = "PCA 散点图", title_combined = "PCA 结果") {
  
  # 数据准备过程...
  colnames(df) <- trimws(colnames(df))  # 去除列名中的空格
  all_numeric_cols <- names(df)[sapply(df, is.numeric)]
  factor_cols <- names(df)[sapply(df, is.factor) | sapply(df, is.character)]
  
  if (!is.null(category_col) && category_col %in% names(df)) {
    # 确保分类变量为因子型，如果不是就转换为因子型
    df$Category <- as.factor(df[[category_col]])  # 转为因子型
  } else {
    stop("错误: 选择的分类列不存在！")
  }
  
  
  # 自动选择所有数值列（除了分类列）
  numeric_cols <- setdiff(all_numeric_cols, category_col)
  
  # 处理缺失值
  imputed_data <- mice(df[numeric_cols], method = missing_method, m = missing_m, seed = 123)
  df_imputed <- complete(imputed_data)
  
  # 计算 PCA
  pca <- prcomp(df_imputed, scale. = scale_data)
  var_explained <- pca$sdev^2 / sum(pca$sdev^2)
  
  # PCA 图绘制...
  p1 <- fviz_pca_biplot(pca, axes = c(1, 2),  
                        geom.ind = c("point"), geom.var = c("arrow", "text"),
                        pointshape = 20, pointsize = 4,
                        label = "var", repel = TRUE, col.var = "black",
                        labelsize = 3,
                        addEllipses = TRUE, ellipse.level = 0.95,
                        col.ind = df$Category
  ) +
    scale_color_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(length(unique(df$Category)))) +  
    labs(title = title_p1,  
         x = paste0("PC1 (", round(var_explained[1] * 100, 2), "%)"),
         y = paste0("PC2 (", round(var_explained[2] * 100, 2), "%)")) +
    theme(panel.background = element_rect(fill = 'white', colour = 'black'),
          axis.title.x = element_text(colour = "black", size = 12, margin = margin(t = 12)),  
          axis.title.y = element_text(colour = "black", size = 12, margin = margin(r = 12)),  
          axis.text = element_text(color = "black"),  
          legend.title = element_blank(),
          legend.position = c(1, 0), legend.justification = c(1, 0))
  
  p2 <- ggplot(as.data.frame(pca$x), aes(PC1, PC2)) +
    geom_point(size = 2, aes(color = df$Category), show.legend = FALSE) +
    scale_color_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(length(unique(df$Category)))) +
    stat_ellipse(aes(color = df$Category), fill = "white", geom = "polygon", 
                 level = 0.95, alpha = 0.01, show.legend = FALSE) +
    labs(title = title_p2,
         x = paste0("PC1 (", round(var_explained[1] * 100, 2), "%)"),  
         y = paste0("PC2 (", round(var_explained[2] * 100, 2), "%)")) +
    theme_classic() +
    theme(axis.line = element_line(colour = "black"),
          axis.title = element_text(color = "black", face = "bold"),
          axis.text = element_text(color = "black", size = 10, face = "bold"))
  
  combined_plot <- (p1 + p2) + plot_annotation(title = title_combined)
  
  return(list(pca = pca, pca_plot1 = p1, pca_plot2 = p2, combined_plot = combined_plot, 
              var_explained = var_explained, imputed_data = df_imputed))
}

# UI 部分
ui <- fluidPage(
  titlePanel("PCA 自动化分析"),
  
  sidebarLayout(
    sidebarPanel(
      fileInput("file1", "选择数据文件", accept = c(".csv", ".txt")),
      textInput("category_col", "选择分类列（例如: 'major'）", value = "major"),
      radioButtons("missing_method", "缺失值处理方法", choices = c("pmm", "mean", "norm")),
      numericInput("missing_m", "插补次数", value = 5, min = 1),
      textInput("title_p1", "PCA 双标图标题", value = "PCA 双标图"),
      textInput("title_p2", "PCA 散点图标题", value = "PCA 散点图"),
      textInput("title_combined", "组合图标题", value = "PCA 结果"),
      actionButton("goButton", "运行 PCA 分析")
    ),
    
    mainPanel(
      splitLayout(
        cellWidths = c("50%", "50%"),
        plotOutput("pca_plot1"),
        plotOutput("pca_plot2")
      ),
      plotOutput("combined_plot"),
      DT::dataTableOutput("data_table"),  # 展示数据的表格
      verbatimTextOutput("var_explained")
    )
  )
)

# Server 部分
server <- function(input, output, session) {
  observeEvent(input$goButton, {
    req(input$file1)
    # 读取数据
    df <- tryCatch({
      read.csv(input$file1$datapath)
    }, error = function(e) {
      showModal(modalDialog(
        title = "读取数据文件错误",
        paste("无法读取数据文件:", e$message),
        easyClose = TRUE,
        footer = NULL
      ))
      return(NULL)
    })
    
    # 运行 PCA 分析
    result <- tryCatch({
      automated_pca_analysis(df, category_col = input$category_col, 
                             missing_method = input$missing_method,
                             missing_m = input$missing_m,
                             title_p1 = input$title_p1,
                             title_p2 = input$title_p2,
                             title_combined = input$title_combined)
    }, error = function(e) {
      showModal(modalDialog(
        title = "PCA 分析错误",
        paste("发生错误:", e$message),
        easyClose = TRUE,
        footer = NULL
      ))
      return(NULL)
    })
    
    # 如果 result 为空，则不继续后续操作
    if (is.null(result)) return()
    
    # 输出结果图
    output$pca_plot1 <- renderPlot({ result$pca_plot1 })
    output$pca_plot2 <- renderPlot({ result$pca_plot2 })
    output$combined_plot <- renderPlot({ result$combined_plot })
    
    # 显示方差解释
    output$var_explained <- renderPrint({
      paste("PC1: ", round(result$var_explained[1] * 100, 2), "%", 
            "\nPC2: ", round(result$var_explained[2] * 100, 2), "%")
    })
    
    # 展示数据表格
    output$data_table <- DT::renderDataTable({
      DT::datatable(df)
    })
  })
}


# 运行 Shiny 应用
shinyApp(ui = ui, server = server)
