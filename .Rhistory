# 进行 PCA 分析
numeric_indices <- which(numeric_cols)  # 获取数值型列的索引
pca_data <- df_imputed[, numeric_indices]  # 选取数值型列进行 PCA
pca <- prcomp(pca_data, scale. = scale_data)  # 是否标准化数据
# 计算 PCA 解释的方差比例
var_explained <- pca$sdev^2 / sum(pca$sdev^2)
# 绘制 PCA 双标图
pca_plot <- fviz_pca_biplot(pca, axes = pca_components,
geom.ind = c("point"),
geom.var = c("arrow", "text"),
pointshape = 20,
pointsize = 4,
label = "var", repel = TRUE, col.var = "black",
labelsize = 0.5,
addEllipses = TRUE,
ellipse.level = 0.95,
col.ind = df$Category
) +
scale_color_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(4)) +
labs(x = paste0("(PC1: ", round(var_explained[1] * 100, 2), "%)"),
y = paste0("(PC2: ", round(var_explained[2] * 100, 2), "%)")) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
axis.title.x = element_text(colour = "black", size = 12, margin = margin(t = 12)),
axis.title.y = element_text(colour = "black", size = 12, margin = margin(r = 12)),
axis.text = element_text(color = "black"),
plot.title = element_blank(),
legend.title = element_blank(),
legend.key = element_blank(),
legend.text = element_text(color = "black", size = 9),
legend.spacing.x = unit(0.06, 'cm'),
legend.key.width = unit(0.01, 'cm'),
legend.key.height = unit(0.01, 'cm'),
legend.background = element_blank(),
legend.position = c(1, 0),
legend.justification = c(1, 0))
# 打印 PCA 图
print(pca_plot)
# 返回 PCA 结果
return(list(pca = pca, pca_plot = pca_plot, var_explained = var_explained, imputed_data = df_imputed))
}
# 示例：运行自动化 PCA 分析
df <- read_table("./PCA/class.txt")
# 确保数据框的列名正确
print(colnames(df))
# 运行自动化 PCA 分析，设置缺失值插补方法为 "pmm"，插补 5 次
result <- automated_pca_analysis(df, category_col = 'major', missing_method = "pmm", missing_m = 5)
library(mice)  # 用于处理缺失值
# 运行自动化 PCA 分析，设置缺失值插补方法为 "pmm"，插补 5 次
result <- automated_pca_analysis(df, category_col = 'major', missing_method = "pmm", missing_m = 5)
# 自动化 PCA 分析函数
automated_pca_analysis <- function(df, category_col = NULL, pca_components = c(1, 2),
missing_method = "pmm", missing_m = 5, scale_data = TRUE) {
#' @param df 数据框，包含数值型和分类变量
#' @param category_col 指定分类变量的列名（字符型），用于颜色分组；如果为 NULL，则自动生成一个分类列
#' @param pca_components 选择用于绘图的主成分（默认 PC1 和 PC2）
#' @param missing_method 缺失值处理方法（默认为 "pmm"），可选值：
#'        - "pmm": 预测均值匹配（适用于连续变量）
#'        - "norm": 正态回归（适用于正态分布数据）
#'        - "mean": 以均值填充缺失值
#'        - "cart": 分类与回归树填补
#' @param missing_m 进行多重插补时生成的插补数据集数量（默认为 5）
#' @param scale_data 是否对数据进行标准化（默认为 TRUE）
# 检查数据框是否为空
if (is.null(df) || nrow(df) == 0) {
stop("数据框为空，请提供有效数据")
}
# 自动判断数据框中列的类型
numeric_cols <- sapply(df, is.numeric)
factor_cols <- sapply(df, is.factor) | sapply(df, is.character)
# 提示用户数据类型的基本信息
message("数据类型分析：")
message("数值型列：", paste(names(df)[numeric_cols], collapse = ", "))
message("分类列：", paste(names(df)[factor_cols], collapse = ", "))
# 确保分类列的名称正确
if (!is.null(category_col)) {
category_col <- trimws(category_col)  # 去除空格
if (!(category_col %in% colnames(df))) {
stop("提供的分类列 '", category_col, "' 不存在，请检查列名是否正确。")
}
df$Category <- df[[category_col]]
message("使用提供的分类列 '", category_col, "' 进行分析。")
} else {
df$Category <- factor(sample(c("A", "B", "C"), nrow(df), replace = TRUE, prob = c(0.4, 0.4, 0.2)))
message("未提供分类列，自动生成了一个 'Category' 列。")
}
# 处理缺失值
message("处理缺失值，方法：", missing_method, "，插补次数：", missing_m)
imputed_data <- mice(df[, numeric_cols], method = missing_method, m = missing_m, seed = 123)
df_imputed <- complete(imputed_data)  # 提取插补后的数据
# 进行 PCA 分析
numeric_indices <- which(numeric_cols)  # 获取数值型列的索引
pca_data <- df_imputed[, numeric_indices]  # 选取数值型列进行 PCA
pca <- prcomp(pca_data, scale. = scale_data)  # 是否标准化数据
# 计算 PCA 解释的方差比例
var_explained <- pca$sdev^2 / sum(pca$sdev^2)
# 绘制 PCA 双标图
pca_plot <- fviz_pca_biplot(pca, axes = pca_components,
geom.ind = c("point"),
geom.var = c("arrow", "text"),
pointshape = 20,
pointsize = 4,
label = "var", repel = TRUE, col.var = "black",
labelsize = 0.5,
addEllipses = TRUE,
ellipse.level = 0.95,
col.ind = df$Category
) +
scale_color_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(4)) +
labs(x = paste0("(PC1: ", round(var_explained[1] * 100, 2), "%)"),
y = paste0("(PC2: ", round(var_explained[2] * 100, 2), "%)")) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
axis.title.x = element_text(colour = "black", size = 12, margin = margin(t = 12)),
axis.title.y = element_text(colour = "black", size = 12, margin = margin(r = 12)),
axis.text = element_text(color = "black"),
plot.title = element_blank(),
legend.title = element_blank(),
legend.key = element_blank(),
legend.text = element_text(color = "black", size = 9),
legend.spacing.x = unit(0.06, 'cm'),
legend.key.width = unit(0.01, 'cm'),
legend.key.height = unit(0.01, 'cm'),
legend.background = element_blank(),
legend.position = c(1, 0),
legend.justification = c(1, 0))
# 打印 PCA 图
print(pca_plot)
# 返回 PCA 结果
return(list(pca = pca, pca_plot = pca_plot, var_explained = var_explained, imputed_data = df_imputed))
}
# 示例：运行自动化 PCA 分析
df <- read_table("./PCA/class.txt")
# 确保数据框的列名正确
print(colnames(df))
# 运行自动化 PCA 分析，设置缺失值插补方法为 "pmm"，插补 5 次
result <- automated_pca_analysis(df, category_col = 'major', missing_method = "pmm", missing_m = 5)
# 自动化 PCA 分析函数（修正版）
automated_pca_analysis <- function(df, category_col = NULL, pca_components = c(1, 2),
missing_method = "pmm", missing_m = 5, scale_data = TRUE) {
#' @param df 数据框，包含数值型和分类变量
#' @param category_col 指定分类变量的列名（字符型），用于颜色分组；如果为 NULL，则自动生成一个分类列
#' @param pca_components 选择用于绘图的主成分（默认 PC1 和 PC2）
#' @param missing_method 缺失值处理方法
#' @param missing_m 进行多重插补时的插补数据集数量（默认 5）
#' @param scale_data 是否对数据进行标准化（默认 TRUE）
if (is.null(df) || nrow(df) == 0) {
stop("数据框为空，请提供有效数据")
}
# 自动检测数值型和分类型列
numeric_indices <- which(sapply(df, is.numeric))
factor_indices <- which(sapply(df, is.factor) | sapply(df, is.character))
# 确保 ID 列不影响 PCA
numeric_indices <- setdiff(numeric_indices, which(names(df) == "ID"))
# 输出数据列信息
message("数据类型分析：")
message("数值型列：", paste(names(df)[numeric_indices], collapse = ", "))
message("分类列：", paste(names(df)[factor_indices], collapse = ", "))
# 处理分类列
if (!is.null(category_col)) {
if (!(category_col %in% names(df))) {
stop("提供的分类列 '", category_col, "' 不存在，请检查列名是否正确。")
}
df$Category <- as.factor(df[[category_col]])
message("使用提供的分类列 '", category_col, "' 进行分析。")
} else {
df$Category <- factor(sample(c("A", "B", "C"), nrow(df), replace = TRUE))
message("未提供分类列，自动生成 'Category' 列。")
}
# 处理缺失值
message("处理缺失值，方法：", missing_method, "，插补次数：", missing_m)
imputed_data <- mice(df[, numeric_indices], method = missing_method, m = missing_m, seed = 123)
df_imputed <- complete(imputed_data)
# 执行 PCA
pca <- prcomp(df_imputed, scale. = scale_data)
# 计算方差贡献率
var_explained <- pca$sdev^2 / sum(pca$sdev^2)
# 绘制 PCA 图
pca_plot <- fviz_pca_biplot(pca, axes = pca_components,
geom.ind = c("point"),
geom.var = c("arrow", "text"),
pointshape = 20,
pointsize = 4,
label = "var", repel = TRUE, col.var = "black",
labelsize = 0.5,
addEllipses = TRUE,
ellipse.level = 0.95,
col.ind = df$Category) +
scale_color_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(4)) +
labs(x = paste0("(PC1: ", round(var_explained[1] * 100, 2), "%)"),
y = paste0("(PC2: ", round(var_explained[2] * 100, 2), "%)"))
print(pca_plot)
return(list(pca = pca, pca_plot = pca_plot, var_explained = var_explained, imputed_data = df_imputed))
}
# 示例：运行自动化 PCA 分析
df <- read_table("./PCA/class.txt")
# 确保数据框的列名正确
print(colnames(df))
# 运行自动化 PCA 分析，设置缺失值插补方法为 "pmm"，插补 5 次
result <- automated_pca_analysis(df, category_col = 'major', missing_method = "pmm", missing_m = 5)
result
automated_pca_analysis <- function(df, category_col = NULL, pca_components = c(1, 2),
missing_method = "pmm", missing_m = 5, scale_data = TRUE) {
#' @param df 数据框，包含数值型和分类变量
#' @param category_col 指定分类变量的列名（字符型），用于颜色分组；如果为 NULL，则自动生成一个分类列
#' @param pca_components 选择用于绘图的主成分（默认 PC1 和 PC2）
#' @param missing_method 缺失值处理方法
#' @param missing_m 进行多重插补时的插补数据集数量（默认 5）
#' @param scale_data 是否对数据进行标准化（默认 TRUE）
if (is.null(df) || nrow(df) == 0) {
stop("数据框为空，请提供有效数据")
}
# 自动检测数值型和分类变量列
numeric_indices <- which(sapply(df, is.numeric))
factor_indices <- which(sapply(df, is.factor) | sapply(df, is.character))
# 去掉 ID 列，避免 PCA 受影响
numeric_indices <- setdiff(numeric_indices, which(names(df) == "ID"))
# 输出数据列信息
message("数据类型分析：")
message("数值型列：", paste(names(df)[numeric_indices], collapse = ", "))
message("分类列：", paste(names(df)[factor_indices], collapse = ", "))
# 处理分类变量
if (!is.null(category_col)) {
if (!(category_col %in% names(df))) {
stop("提供的分类列 '", category_col, "' 不存在，请检查列名是否正确。")
}
df$Category <- as.factor(df[[category_col]])
message("使用提供的分类列 '", category_col, "' 进行分析。")
} else {
df$Category <- factor(sample(c("A", "B", "C"), nrow(df), replace = TRUE))
message("未提供分类列，自动生成 'Category' 列。")
}
# 处理缺失值
message("处理缺失值，方法：", missing_method, "，插补次数：", missing_m)
imputed_data <- mice(df[, numeric_indices], method = missing_method, m = missing_m, seed = 123)
df_imputed <- complete(imputed_data)
# 进行 PCA 分析
pca <- prcomp(df_imputed, scale. = scale_data)
# 计算解释方差比例
var_explained <- pca$sdev^2 / sum(pca$sdev^2)
# 绘制 PCA 双标图
pca_plot <- fviz_pca_biplot(pca, axes = pca_components,
geom.ind = c("point"),  # 样本点
geom.var = c("arrow", "text"),  # 变量箭头 + 标签
pointshape = 20,  # 设定点的形状
pointsize = 4,  # 设定点的大小
label = "var", repel = TRUE, col.var = "black",  # 避免变量标签重叠
labelsize = 3,  # 变量标签的大小
addEllipses = TRUE,  # 添加 95% 置信椭圆
ellipse.level = 0.95,  # 置信区间水平
col.ind = df$Category  # 按分类变量着色
) +
scale_color_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(length(unique(df$Category)))) +
labs(x = paste0("PC1 (", round(var_explained[1] * 100, 2), "%)"),
y = paste0("PC2 (", round(var_explained[2] * 100, 2), "%)")) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
axis.title.x = element_text(colour = "black", size = 12, margin = margin(t = 12)),
axis.title.y = element_text(colour = "black", size = 12, margin = margin(r = 12)),
axis.text = element_text(color = "black"),
legend.title = element_blank(),
legend.key = element_blank(),
legend.text = element_text(color = "black", size = 9),
legend.position = c(1, 0),
legend.justification = c(1, 0))
print(pca_plot)
return(list(pca = pca, pca_plot = pca_plot, var_explained = var_explained, imputed_data = df_imputed))
}
# 示例：运行自动化 PCA 分析
df <- read_table("./PCA/class.txt")
# 确保数据框的列名正确
print(colnames(df))
# 运行自动化 PCA 分析，设置缺失值插补方法为 "pmm"，插补 5 次
result <- automated_pca_analysis(df, category_col = 'major', missing_method = "pmm", missing_m = 5)
result
automated_pca_analysis <- function(df, category_col = NULL, pca_components = c(1, 2),
missing_method = "pmm", missing_m = 5, scale_data = TRUE) {
#' @param df 数据框，包含数值型和分类变量
#' @param category_col 选择分类变量的列名（用于着色）
#' @param pca_components 选择主成分（默认 PC1 和 PC2）
#' @param missing_method 缺失值插补方法（默认 pmm）
#' @param missing_m 插补次数（默认 5）
#' @param scale_data 是否标准化数据（默认 TRUE）
if (is.null(df) || nrow(df) == 0) {
stop("数据框为空，请提供有效数据")
}
# **只保留分类列 + 数值列**
numeric_cols <- names(df)[sapply(df, is.numeric)]
factor_cols <- names(df)[sapply(df, is.factor) | sapply(df, is.character)]
# 确保 category_col 存在，删除其他分类列
if (!is.null(category_col) && category_col %in% names(df)) {
df <- df %>%
select(all_of(c(numeric_cols, category_col)))
df$Category <- as.factor(df[[category_col]])
} else {
stop("错误: 选择的分类列不存在！")
}
message("保留的列：", paste(names(df), collapse = ", "))
# 处理缺失值
message("处理缺失值，方法：", missing_method, "，插补次数：", missing_m)
imputed_data <- mice(df[numeric_cols], method = missing_method, m = missing_m, seed = 123)
df_imputed <- complete(imputed_data)
# 计算 PCA
pca <- prcomp(df_imputed, scale. = scale_data)
var_explained <- pca$sdev^2 / sum(pca$sdev^2)
# **第一张图：PCA 双标图**
p1 <- fviz_pca_biplot(pca, axes = pca_components,
geom.ind = c("point"), geom.var = c("arrow", "text"),
pointshape = 20, pointsize = 4,
label = "var", repel = TRUE, col.var = "black",
labelsize = 3,
addEllipses = TRUE, ellipse.level = 0.95,
col.ind = df$Category
) +
scale_color_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(length(unique(df$Category)))) +
labs(x = paste0("PC1 (", round(var_explained[1] * 100, 2), "%)"),
y = paste0("PC2 (", round(var_explained[2] * 100, 2), "%)")) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
axis.title.x = element_text(colour = "black", size = 12, margin = margin(t = 12)),
axis.title.y = element_text(colour = "black", size = 12, margin = margin(r = 12)),
axis.text = element_text(color = "black"),
legend.title = element_blank(),
legend.position = c(1, 0), legend.justification = c(1, 0))
# **第二张图：PCA 散点图**
p2 <- ggplot(as.data.frame(pca$x), aes(PC1, PC2)) +
geom_point(size = 2, aes(color = df$Category), show.legend = FALSE) +
scale_color_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(length(unique(df$Category)))) +
stat_ellipse(aes(color = df$Category), fill = "white", geom = "polygon",
level = 0.95, alpha = 0.01, show.legend = FALSE) +
labs(x = paste0("PC1 (", round(var_explained[1] * 100, 2), "%)"),
y = paste0("PC2 (", round(var_explained[2] * 100, 2), "%)")) +
theme_classic() +
theme(axis.line = element_line(colour = "black"),
axis.title = element_text(color = "black", face = "bold"),
axis.text = element_text(color = "black", size = 10, face = "bold"))
# **添加边缘密度图**
p2 <- ggMarginal(p2, type = "density", groupColour = FALSE, groupFill = TRUE)
print(p1)
print(p2)
return(list(pca = pca, pca_plot1 = p1, pca_plot2 = p2, var_explained = var_explained, imputed_data = df_imputed))
}
# 示例：运行自动化 PCA 分析
df <- read_table("./PCA/class.txt")
# 确保数据框的列名正确
print(colnames(df))
# 运行自动化 PCA 分析，设置缺失值插补方法为 "pmm"，插补 5 次
result <- automated_pca_analysis(df, category_col = 'major', missing_method = "pmm", missing_m = 5)
result
View(df)
automated_pca_analysis <- function(df, category_col = NULL, pca_components = c(1, 2),
missing_method = "pmm", missing_m = 5, scale_data = TRUE) {
#' @param df 数据框，包含数值型和分类变量
#' @param category_col 选择分类变量的列名（用于着色）
#' @param pca_components 选择主成分（默认 PC1 和 PC2）
#' @param missing_method 缺失值插补方法（默认 pmm）
#' @param missing_m 插补次数（默认 5）
#' @param scale_data 是否标准化数据（默认 TRUE）
if (is.null(df) || nrow(df) == 0) {
stop("数据框为空，请提供有效数据")
}
# **只保留分类列 + 数值列**
numeric_cols <- names(df)[sapply(df, is.numeric)]
factor_cols <- names(df)[sapply(df, is.factor) | sapply(df, is.character)]
# 确保 category_col 存在，删除其他分类列
if (!is.null(category_col) && category_col %in% names(df)) {
df <- df %>%
select(all_of(c(numeric_cols, category_col)))
df$Category <- as.factor(df[[category_col]])
} else {
stop("错误: 选择的分类列不存在！")
}
message("保留的列：", paste(names(df), collapse = ", "))
# 处理缺失值
message("处理缺失值，方法：", missing_method, "，插补次数：", missing_m)
imputed_data <- mice(df[numeric_cols], method = missing_method, m = missing_m, seed = 123)
df_imputed <- complete(imputed_data)
# 计算 PCA
pca <- prcomp(df_imputed, scale. = scale_data)
var_explained <- pca$sdev^2 / sum(pca$sdev^2)
# **第一张图：PCA 双标图**
p1 <- fviz_pca_biplot(pca, axes = pca_components,
geom.ind = c("point"), geom.var = c("arrow", "text"),
pointshape = 20, pointsize = 4,
label = "var", repel = TRUE, col.var = "black",
labelsize = 3,
addEllipses = TRUE, ellipse.level = 0.95,
col.ind = df$Category
) +
scale_color_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(length(unique(df$Category)))) +
labs(x = paste0("PC1 (", round(var_explained[1] * 100, 2), "%)"),
y = paste0("PC2 (", round(var_explained[2] * 100, 2), "%)")) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
axis.title.x = element_text(colour = "black", size = 12, margin = margin(t = 12)),
axis.title.y = element_text(colour = "black", size = 12, margin = margin(r = 12)),
axis.text = element_text(color = "black"),
legend.title = element_blank(),
legend.position = c(1, 0), legend.justification = c(1, 0))
# **第二张图：PCA 散点图**
p2 <- ggplot(as.data.frame(pca$x), aes(PC1, PC2)) +
geom_point(size = 2, aes(color = df$Category), show.legend = FALSE) +
scale_color_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(length(unique(df$Category)))) +
stat_ellipse(aes(color = df$Category), fill = "white", geom = "polygon",
level = 0.95, alpha = 0.01, show.legend = FALSE) +
labs(x = paste0("PC1 (", round(var_explained[1] * 100, 2), "%)"),
y = paste0("PC2 (", round(var_explained[2] * 100, 2), "%)")) +
theme_classic() +
theme(axis.line = element_line(colour = "black"),
axis.title = element_text(color = "black", face = "bold"),
axis.text = element_text(color = "black", size = 10, face = "bold"))
# **添加边缘密度图**
p2 <- ggMarginal(p2, type = "density", groupColour = FALSE, groupFill = TRUE)
print(p1)
print(p2)
print(p1+p2)
return(list(pca = pca, pca_plot1 = p1, pca_plot2 = p2, var_explained = var_explained, imputed_data = df_imputed))
}
# 示例：运行自动化 PCA 分析
df <- read_table("./PCA/class.txt")
# 确保数据框的列名正确
print(colnames(df))
# 运行自动化 PCA 分析，设置缺失值插补方法为 "pmm"，插补 5 次
result <- automated_pca_analysis(df, category_col = 'major', missing_method = "pmm", missing_m = 5)
automated_pca_analysis <- function(df, category_col = NULL, numeric_cols = NULL, auto_select = TRUE,
pca_components = c(1, 2), missing_method = "pmm", missing_m = 5, scale_data = TRUE,
title_p1 = "PCA 双标图", title_p2 = "PCA 散点图", title_combined = "PCA 结果") {
#' @param df 数据框，包含数值型和分类变量
#' @param category_col 选择分类变量的列名（用于着色）
#' @param numeric_cols 选择要分析的数值列（若 `auto_select = FALSE`，用户可手动指定）
#' @param auto_select 是否自动选择数值列（默认 TRUE）
#' @param pca_components 选择主成分（默认 PC1 和 PC2）
#' @param missing_method 缺失值插补方法（默认 pmm）
#' @param missing_m 插补次数（默认 5）
#' @param scale_data 是否标准化数据（默认 TRUE）
#' @param title_p1 PCA 双标图的标题
#' @param title_p2 PCA 散点图的标题
#' @param title_combined 组合图的标题
if (is.null(df) || nrow(df) == 0) {
stop("数据框为空，请提供有效数据")
}
# 1️⃣ 选择分类列 & 数值列
all_numeric_cols <- names(df)[sapply(df, is.numeric)]
factor_cols <- names(df)[sapply(df, is.factor) | sapply(df, is.character)]
if (!is.null(category_col) && category_col %in% names(df)) {
df$Category <- as.factor(df[[category_col]])  # 确保分类变量为因子型
} else {
stop("错误: 选择的分类列不存在！")
}
if (auto_select) {
numeric_cols <- all_numeric_cols  # 自动选择所有数值列
} else {
if (is.null(numeric_cols) || !all(numeric_cols %in% names(df))) {
stop("错误: 用户选择的数值列无效！")
}
}
message("使用的分类列：", category_col)
message("使用的数值列：", paste(numeric_cols, collapse = ", "))
# 2️⃣ 处理缺失值
message("处理缺失值，方法：", missing_method, "，插补次数：", missing_m)
imputed_data <- mice(df[numeric_cols], method = missing_method, m = missing_m, seed = 123)
df_imputed <- complete(imputed_data)
# 3️⃣ 计算 PCA
pca <- prcomp(df_imputed, scale. = scale_data)
var_explained <- pca$sdev^2 / sum(pca$sdev^2)
# 4️⃣ 绘制第一张图（PCA 双标图）
p1 <- fviz_pca_biplot(pca, axes = pca_components,
geom.ind = c("point"), geom.var = c("arrow", "text"),
pointshape = 20, pointsize = 4,
label = "var", repel = TRUE, col.var = "black",
labelsize = 3,
addEllipses = TRUE, ellipse.level = 0.95,
col.ind = df$Category
) +
scale_color_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(length(unique(df$Category)))) +
labs(title = title_p1,
x = paste0("PC1 (", round(var_explained[1] * 100, 2), "%)"),
y = paste0("PC2 (", round(var_explained[2] * 100, 2), "%)")) +
theme(panel.background = element_rect(fill = 'white', colour = 'black'),
axis.title.x = element_text(colour = "black", size = 12, margin = margin(t = 12)),
axis.title.y = element_text(colour = "black", size = 12, margin = margin(r = 12)),
axis.text = element_text(color = "black"),
legend.title = element_blank(),
legend.position = c(1, 0), legend.justification = c(1, 0))
# 5️⃣ 绘制第二张图（PCA 散点图）
p2 <- ggplot(as.data.frame(pca$x), aes(PC1, PC2)) +
geom_point(size = 2, aes(color = df$Category), show.legend = FALSE) +
scale_color_manual(values = colorRampPalette(brewer.pal(12, "Paired"))(length(unique(df$Category)))) +
stat_ellipse(aes(color = df$Category), fill = "white", geom = "polygon",
level = 0.95, alpha = 0.01, show.legend = FALSE) +
labs(title = title_p2,
x = paste0("PC1 (", round(var_explained[1] * 100, 2), "%)"),
y = paste0("PC2 (", round(var_explained[2] * 100, 2), "%)")) +
theme_classic() +
theme(axis.line = element_line(colour = "black"),
axis.title = element_text(color = "black", face = "bold"),
axis.text = element_text(color = "black", size = 10, face = "bold"))
# 6️⃣ **合并图像**
combined_plot <- (p1 + p2) + plot_annotation(title = title_combined)
# 显示图像
print(p1)
print(p2)
print(combined_plot)
return(list(pca = pca, pca_plot1 = p1, pca_plot2 = p2, combined_plot = combined_plot,
var_explained = var_explained, imputed_data = df_imputed))
}
# 示例：运行自动化 PCA 分析
df <- read_table("./PCA/class.txt")
# 确保数据框的列名正确
print(colnames(df))
# 运行自动化 PCA 分析，设置缺失值插补方法为 "pmm"，插补 5 次
result <- automated_pca_analysis(df, category_col = 'major', missing_method = "pmm", missing_m = 5)
result
library(shiny); runApp('PCA/PCA_web.R')
runApp('PCA/PCA_web.R')
runApp('PCA/PCA_web.R')
runApp('PCA/PCA_web.R')
